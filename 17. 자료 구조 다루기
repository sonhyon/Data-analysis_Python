[자료구조란?]
import pandas as pd
df = pd.DataFrame([1,2,3])
df.mean()

x = [1,2,3]
x.mean()

sum(x)/len(x)

df_x = pd.DataFrame(x)
df_x
df_x.mean()

[스칼라]
int, float, str

- 타입 바꾸기
int()
float()
complex()
str()
bool()
pd.to_datetime()

[리스트]
- 만들기
x = [1,2,'a','b']

- 추출하기
x[0]
x[1:3]

- 수정하기
x.append(8) #추가하기
x.remove(2) #삭제하기
x[0] = 9    #변경하기

- 활용하기
exam.query('nclass in [1,3,5]')
mpg.gropuby([manufacturer', 'drv']) \
   .agg(mean_cty = ('cty', 'mean'))
   
[튜플]
- 만들기
x = (1,2,'a','b')
x = 1,2,'a','b'

- 추출하기
x[0]
x[1:3]

- 튜플은 수정할 수 없다
x.append(8)
x.remove(3)
x[0] = 9

- 활용하기
exam.agg(mean_math = ('math', 'mean'))
sns.scatterplot(data = mpg, x = 'displ', y = 'hwy').set(xlim = (3, 6))

[딕서녀리]
- 만들기
x = {'name' : 'kim'}
type(x)

x = {'id' : 1, 'name' : ['kim', 'park'], 'nclass' : (1,2,3)}

- 추출하기
x['id']
x['name']
x['name'][0]
x['nclass'][1]

- 수정하기
# 추가하기
x['score'] = [5,6,7]

# 삭제하기
del(x['id'])
del(x['name'][1])

# 값 변경하기
x['score'] = [7,8,9]
x['score'][2] = 99

# 키 변경하기
x['math'] = x['score']
del(x['score'])

- 활용하기
df = pd.DataFrame({'id' : [1,2,3]})
mpg.rename(columns = {'cty' : 'city'})


[시리즈]
- 만들기
import pandas as pd
x_num = pd.Series([3,4,5])
type(x_num)

x_label = pd.Series({3,4,5], index = ['kim', 'lee', 'park'])
x_label

- 추출하기
x_num[0]
x_label['kim']
x_label.loc['kim']
x_num.iloc[0]

- 수정하기
# 추가하기
x_num[3] = 9
x_label['choi'] = 6

# 삭제하기
del(x_num[2])
del(x_label['park'])

# 변경하기
x_num[3] = 4
x_label['kim'] = 5

- 활용하기
# 데이터프레임에서 변수 추출해 활용하기
mpg = pd.read_csv('mpg.csv')
mpg['hwy']

mpg['hwy'].mean()

# pandas 함수의 출력 결과 활용하기
n_category = mpg['category'].value_counts()
n_category

type(n_category)
n_category[0:2]
n_category[['suv', 'compact']]


[데이터 프레임]
- 만들기
import pandas as pd
df = pd.DataFrame({'var1' : [1,2,3],
                   'var2' : [4,5,6]})
type(df)

df = pd.DataFrame({'var1' : [1,2,3],
                   'var2' : [4,5,6]},
                   index = ['kim' ,'lee', 'park'])
df

x = df['var'1']
type(x)

- 자료 구조 바꾸기
x = [1,1,2,3]
x.mean()
x.value_counts()

df_x = pd.DataFrame(x_
type(x)
df_x.mean()
df_x.value_counts()

