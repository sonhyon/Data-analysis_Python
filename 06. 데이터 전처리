*pandas는 데이터 전처리에 가장 많이 사용되는 패키지이다
*pandas 함수 : query(), df[], sort_values(), groupby(), assign(), agg(), merge(), concat()

#행 추출
exam.query('nclass == 1") 
exam.query('nclass == 1 & math > 50')
exam.query('math >= 90 | english >= 90')
exam.query('nclass == 1 | nclass == 3 | nclass ==5')
exam.query('nclass in [1, 3, 5]') #한꺼번에 표현 가능

*파이썬에서 사용하는 기호
논리 연산자 : <, <=, >, >=, ==, !=, |, &, in
산술 연산자 : +, -, *, **, /, //, %

#변수 추출하기
exam['math'] 
exam[['nclass', 'math', 'english']] #여러 변수 추출
exam[['math']] #데이터 프레임 유지하기

#변수 제거하기
exam.drop(columns = 'math')
exam.drop(columns = ['math', 'english'])

exam.query('nclass == 1')['english'] #1반의 영어 성적을 확인 가능
exam.query('nclass == 1')['english'].head() #일부만 추출
exam.query('nclass == 1') \ #가독성 있게 백슬래시 입력
    [['english']] \
    .head()

#정렬하기
exam.sort_values('math') #오름차순
exam.sort_values('math', ascending = False) #내림차순
exam.sort_values(['nclass', 'math']) #여러 정렬 기준 적용
exam.sort_values(['nclass', 'math'], ascending = [True, False])

#파생변수 추가
exam.assign(total = exam['math'] + exam['english'] + exam['science']
exam.assign(
    total = exam['math'] + exam['english'] + exam['science'], #여러 파생변수 추가
    mean = (exam['math'] + exam['english'] + exam['science'])/3)

exam.assign(test = np.where(exam['science'] > 60, "pass", "fail"))
exam.assign(test = np.where(exam['science'] > 60, "pass", "fail")).sort_values('total')

long_name.assign(new = lambda x: x['math'] + x['english'] + x['science']) #데이터프레임명을 반복해서 적기에 번거로우므로 약어를 사용해 코드를 간결히 표현한다

#집단별로 요약
exam.agg(mean_math = ('math'. 'mean')) #한 변수에 대한 평균 구하기
exam.groupby('nclass') \ 
    .agg(mean_math = ('math', 'mean')) #집단별 요약 통계량 구하기
exam.groupby('nclass', as_index = Fasle) \ 
    .agg(mean_math = ('math', 'mean')) #변수를 인덱스로 바꾸지 안기
exam.groupby('nclass') \
    .agg(mean_math = ('math', 'mean'), #여러 요약 통계량 한 번에 구하기
        sum_math = ('math', 'sum'),
        median_math = ('math', 'median'),
        n =('nclass', 'count')) 
*agg()에 자주 사용하는 요약통계량 함수 : mean(), std(), sum(), median(), min(), max(), count()
exam.groupby('nclass').mean() #모든 변수의 요약통계량 한 번에 구하기

mpg.groupby(['manufacturer', 'drv']) \
    .agg(mean_cty = ('cty', 'mean')) #cty 평균 구하기

mpg.groupby('drv') \
    .agg(n = ('drv', 'count')) #빈도수 구하기
mpg['drv'].value_count() #더 간단하게 빈도수 구하기 / 자료 구조가 데이터프레임이 아닌 시리즈이므로 query()를 적용할 수 없다

#pandas 함수 조합하기
Q. 제조 회사별로 'suv' 자동차의 도시 및 고속도로 합산 연비 평균을 구해 내림차순으로 정렬하고, 1~5위까지 출력하기
mpg.query('category' == 'suv') \
    .assign(total = (mpg['hwy'] + mpg['cty']) / 2) \
    .groupby('manufacturer') \
    .aff(mean_tot = ('total', 'mean')) \
    .sort_valures('mean_tot', ascending = False) \
    .head()

